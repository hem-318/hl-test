name: Azure Multi-Region Latency Test

on:
  workflow_dispatch: # Manual trigger via GitHub UI
    inputs:
      test_regions:
        description: 'Comma-separated list of regions to test (leave empty for all regions)'
        required: false
        default: ''
      sequential_mode:
        description: 'Run tests sequentially (one region at a time)'
        required: false
        default: true
        type: boolean
  schedule:
    - cron: '0 2 * * 1' # Run weekly on Monday at 2 AM UTC

env:
  RESOURCE_GROUP: latency-test-rg
  VM_SIZE: Standard_F4s_v2
  VM_IMAGE: Canonical:0001-com-ubuntu-server-jammy:22_04-lts-gen2:latest
  REDIS_URL: ${{ secrets.REDIS_URL }}
  PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      regions: ${{ steps.get-regions.outputs.regions }}
      sequential: ${{ steps.get-regions.outputs.sequential }}
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }
      
      - name: Create Resource Group
        run: |
          az group create --name ${{ env.RESOURCE_GROUP }} --location centralus || echo "Resource group already exists"
      
      - name: Get Azure Regions
        id: get-regions
        run: |
          if [ -n "${{ github.event.inputs.test_regions }}" ]; then
            # Use manually specified regions
            REGIONS='${{ github.event.inputs.test_regions }}'
            REGIONS_JSON=$(echo $REGIONS | jq -R -s -c 'split(",") | map(gsub("\\s+"; ""))')
          else
            # Get all available regions that support VMs
            REGIONS_JSON=$(az account list-locations --query "[?metadata.regionType=='Physical' && metadata.physicalLocation!=null].name" -o json | jq -c 'sort')
          fi
          
          # Determine if sequential mode is enabled
          SEQUENTIAL="${{ github.event.inputs.sequential_mode }}"
          if [ -z "$SEQUENTIAL" ]; then
            SEQUENTIAL="true"  # Default to sequential
          fi
          
          echo "regions=$REGIONS_JSON" >> $GITHUB_OUTPUT
          echo "sequential=$SEQUENTIAL" >> $GITHUB_OUTPUT
          echo "Testing regions: $REGIONS_JSON"
          echo "Sequential mode: $SEQUENTIAL"

  latency-test:
    needs: [setup]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: ${{ needs.setup.outputs.sequential == 'true' && 1 || 10 }}
      matrix:
        region: ${{ fromJson(needs.setup.outputs.regions) }}
    timeout-minutes: 30
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }
      
      - name: Test VM Availability in Region
        id: check-vm
        continue-on-error: true
        run: |
          # Check if VM size is available in the region
          AVAILABLE=$(az vm list-skus --location ${{ matrix.region }} --size ${{ env.VM_SIZE }} --query "[?resourceType=='virtualMachines' && restrictions[0]==null].name" -o tsv | head -1)
          if [ -z "$AVAILABLE" ]; then
            echo "VM size ${{ env.VM_SIZE }} not available in ${{ matrix.region }}"
            echo "available=false" >> $GITHUB_OUTPUT
          else
            echo "available=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Run Latency Test in ${{ matrix.region }}
        if: steps.check-vm.outputs.available == 'true'
        id: run-test
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            set -e
            
            # Generate unique VM name
            VM_NAME="latency-vm-$(echo ${{ matrix.region }} | tr -d '-')$(date +%s)"
            
            echo "Creating VM $VM_NAME in ${{ matrix.region }}..."
            
            # Create VM with public IP
            az vm create \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name "$VM_NAME" \
              --location ${{ matrix.region }} \
              --image ${{ env.VM_IMAGE }} \
              --size ${{ env.VM_SIZE }} \
              --admin-username azureuser \
              --generate-ssh-keys \
              --public-ip-sku Standard \
              --nic-delete-option delete \
              --os-disk-delete-option delete \
              --accelerated-networking true \
              --tags "purpose=latency-test" "region=${{ matrix.region }}" \
              --output none
            
            echo "VM created successfully. Installing dependencies..."
            
            # Install Node.js, npm and clone the test repository
            INSTALL_SCRIPT='#!/bin/bash
            set -e
            
            # Update system
            sudo apt-get update -y
            
            # Install Node.js 20.x
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt-get install -y nodejs
            
            # Clone the test repository
            cd /home/azureuser
            if [ -n "${{ secrets.GH_PAT }}" ]; then
              git clone https://${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git
            else
              git clone https://github.com/${{ github.repository }}.git
            fi
            
            cd hl-test
            npm install
            
            # Create environment variables file
            cat > .env << EOF
            REDIS_URL=${{ env.REDIS_URL }}
            PRIVATE_KEY=${{ env.PRIVATE_KEY }}
            REGION=${{ matrix.region }}
            EOF
            
            # Run the latency test with region information
            export REDIS_URL="${{ env.REDIS_URL }}"
            export PRIVATE_KEY="${{ env.PRIVATE_KEY }}"
            export REGION="${{ matrix.region }}"
            node hyperliquid.js > /home/azureuser/output.log 2>&1
            '
            
            # Execute installation and test script
            az vm run-command invoke \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name "$VM_NAME" \
              --command-id RunShellScript \
              --scripts "$INSTALL_SCRIPT" \
              --timeout 600 \
              --output none
            
            echo "Test execution completed. Retrieving results..."
            
            # Retrieve results
            OUTPUT=$(az vm run-command invoke \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name "$VM_NAME" \
              --command-id RunShellScript \
              --scripts "cat /home/azureuser/output.log || echo 'No output file found'" \
              --query "value[0].message" \
              -o tsv)
            
            echo "Raw output from ${{ matrix.region }}:"
            echo "$OUTPUT"
            
            # Extract average latency
            AVG_LATENCY=$(echo "$OUTPUT" | grep -oP 'Average latency: \K[\d.]+' || echo "0")
            
            # Save results to file
            mkdir -p results
            echo "$OUTPUT" > "results/${{ matrix.region }}.txt"
            echo "${{ matrix.region }}:$AVG_LATENCY" > "results/${{ matrix.region }}.summary"
            
            echo "Average latency for ${{ matrix.region }}: ${AVG_LATENCY} ms"
            
            # Delete VM
            echo "Cleaning up VM..."
            az vm delete --yes --no-wait \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name "$VM_NAME" \
              --output none
            
            echo "VM deletion initiated for $VM_NAME"
      
      - name: Handle Unavailable Region
        if: steps.check-vm.outputs.available != 'true'
        run: |
          mkdir -p results
          echo "VM size not available in region" > "results/${{ matrix.region }}.txt"
          echo "${{ matrix.region }}:999999" > "results/${{ matrix.region }}.summary"
      
      - name: Upload Region Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: results-${{ matrix.region }}
          path: results/
          retention-days: 7

  aggregate-results:
    needs: [latency-test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: Aggregate Results
        run: |
          mkdir -p aggregated-results
          
          # Combine all region results
          for artifact_dir in artifacts/results-*/; do
            if [ -d "$artifact_dir" ]; then
              cp -r "$artifact_dir"/* aggregated-results/ 2>/dev/null || true
            fi
          done
          
          # Create comprehensive results file
          TIMESTAMP=$(date -u +"%Y%m%d_%H%M%S")
          RESULTS_FILE="aggregated-results/LATENCY_RESULTS_${TIMESTAMP}.md"
          
          echo "# Azure Multi-Region Latency Test Results" > "$RESULTS_FILE"
          echo "" >> "$RESULTS_FILE"
          echo "**Test Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> "$RESULTS_FILE"
          echo "**Sequential Mode:** ${{ needs.setup.outputs.sequential }}" >> "$RESULTS_FILE"
          echo "" >> "$RESULTS_FILE"
          
          # Count successful regions
          SUCCESSFUL_REGIONS=$(find aggregated-results -name "*.summary" -exec grep -v ":999999$" {} \; | wc -l)
          echo "**Total Regions Tested:** $SUCCESSFUL_REGIONS" >> "$RESULTS_FILE"
          echo "" >> "$RESULTS_FILE"
          
          # Sort regions by latency
          echo "## Results Summary (Fastest to Slowest)" >> "$RESULTS_FILE"
          echo "" >> "$RESULTS_FILE"
          echo "| Rank | Region | Average Latency (ms) |" >> "$RESULTS_FILE"
          echo "|------|--------|---------------------|" >> "$RESULTS_FILE"
          
          # Process and sort results
          find aggregated-results -name "*.summary" -exec cat {} \; | \
            grep -v ":999999$" | \
            sort -t: -k2 -n | \
            nl -nln | \
            while IFS=: read -r rank region latency; do
              echo "| $rank | $region | $latency |" >> "$RESULTS_FILE"
            done
          
          echo "" >> "$RESULTS_FILE"
          echo "## Detailed Results by Region" >> "$RESULTS_FILE"
          echo "" >> "$RESULTS_FILE"
          
          # Add detailed results for each region
          for summary_file in aggregated-results/*.summary; do
            if [ -f "$summary_file" ]; then
              region=$(basename "$summary_file" .summary)
              latency=$(cat "$summary_file" | cut -d: -f2)
              
              echo "### $region" >> "$RESULTS_FILE"
              echo "" >> "$RESULTS_FILE"
              echo "**Average Latency:** ${latency} ms" >> "$RESULTS_FILE"
              echo "" >> "$RESULTS_FILE"
              
              # Add detailed output if available
              detail_file="aggregated-results/${region}.txt"
              if [ -f "$detail_file" ]; then
                echo '```' >> "$RESULTS_FILE"
                cat "$detail_file" >> "$RESULTS_FILE"
                echo '```' >> "$RESULTS_FILE"
                echo "" >> "$RESULTS_FILE"
              fi
            fi
          done
          
          # Update latest results
          cp "$RESULTS_FILE" aggregated-results/LATEST_RESULTS.md
          
          echo "Results aggregated successfully!"
          echo "Generated: $RESULTS_FILE"
      
      - name: Upload Aggregated Results
        uses: actions/upload-artifact@v4
        with:
          name: aggregated-results
          path: aggregated-results/
          retention-days: 30
      
      - name: Commit Results to Repository
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Copy results to test-results directory
          mkdir -p test-results
          cp aggregated-results/* test-results/
          
          # Commit and push
          git add test-results/
          git diff --staged --quiet || git commit -m "Update latency test results - $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          git push || echo "No changes to commit"